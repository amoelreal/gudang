<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Bpk_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get bpk by no_bpk
     */
    function get_bpk($no_bpk)
    {
        return $this->db->get_where('bpk',array('no_bpk'=>$no_bpk))->row_array();
    }

    /*
     * Get all bpk
     */
    function get_all_bpk()
    {
        return $this->db->get('bpk')->result_array();
    }

    /*
     * function to add new bpk
     */
    function add_bpk($params)
    {
        $this->db->insert('bpk',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update bpk
     */
    function update_bpk($no_bpk,$params)
    {
        $this->db->where('no_bpk',$no_bpk);
        $response = $this->db->update('bpk',$params);
        if($response)
        {
            return "bpk updated successfully";
        }
        else
        {
            return "Error occuring while updating bpk";
        }
    }

    /*
     * function to delete bpk
     */
    function delete_bpk($no_bpk)
    {
        $response = $this->db->delete('bpk',array('no_bpk'=>$no_bpk));
        if($response)
        {
            return "bpk deleted successfully";
        }
        else
        {
            return "Error occuring while deleting bpk";
        }
    }

    function add_rekap_log($no_pbo)
    {
      for ($i=6; $i < 71; $i++) {
        # code...
      $params = array(
                  'bpk_no_bpk' => $no_pbo,
                  'grade' => $i,
                      );
        $this->db->insert('rekap_pembayaran_log',$params);
        //return $this->db->insert_id();
      }
    }

      function add_bongkar_log($no_pbo)
      {
        for ($i=6; $i < 71; $i++) {
          # code...
        $params = array(
                    'bpk_no_bpk' => $no_pbo,
                    'grade' => $i,
                        );
          $this->db->insert('bongkar_log',$params);
          //return $this->db->insert_id();
        }
      }

      function add_cek_log($no_pbo)
      {
        for ($i=6; $i < 71; $i++) {
          # code...
        $params = array(
                    'bpk_no_bpk' => $no_pbo,
                    'grade' => $i,
                        );
          $this->db->insert('cek_log',$params);
          //return $this->db->insert_id();
        }
      }

      function add_selisih_stok($no_pbo)
      {
        for ($i=6; $i < 71; $i++) {
          # code...
        $params = array(
                    'bpk_no_bpk' => $no_pbo,
                    'grade' => $i,
                        );
          $this->db->insert('selisih_stok',$params);
          //return $this->db->insert_id();
        }
      }

      function InggrisTgl($tanggal){
      	$tgl=substr($tanggal,0,2);
      	$bln=substr($tanggal,3,2);
      	$thn=substr($tanggal,6,4);
      	$awal="$thn-$bln-$tgl";
      	return $awal;
      }

      function Tglexcel($tanggal){
      	$tgl=date("Y-m-d", ($tanggal-25569)*86400);
      	return $tgl;
      }

      # Fungsi untuk membalik tanggal dari format English -> Indo
      function IndonesiaTgl($tanggal){
      	$tgl=substr($tanggal,8,2);
      	$bln=substr($tanggal,5,2);
      	$thn=substr($tanggal,0,4);
      	$awal="$tgl-$bln-$thn";
      	return $awal;
      }

      function jumlah_bpk()
      {
          $query = $this->db->get('bpk');
          return $query->num_rows();
      }
      function jumlah_bpk_skr($tanggal)
      {
          return $this->db->query("select * from bpk where tanggal between '$tanggal-1' and '$tanggal-31'")->num_rows();
      }

      function buangspasi($teks){
      $teks= trim($teks);
      while( strpos($teks, ' ') ){
      $hasil= str_replace(' ', '', $teks);
      }
      return $teks;
      }
}
